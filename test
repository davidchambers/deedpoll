#!/usr/bin/env bash

declare -i passes=0
declare -i failures=0

eq() {
  if [ "$1" == "$2" ] ; then
    let passes++
  else
    let failures++
    printf '\nEXPECTED:\n%s\nRECEIVED:\n%s\n' "$2" "$1" >&2
  fi
}

tmp="$(mktemp -d "$TMPDIR/deedpoll.XXXXXXXXXX")"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cat >"$tmp/example.js" <<END
function findIndex(array, el) {
  for (var i = 0, len = array.length; i < len; i += 1) {
    if (array[i] === el) {
      return i;
    }
  }
  return -1;
}
END

bin/deedpoll -r array:list -r i:idx -r index:idx -- "$tmp/example.js" \
  1>"$tmp/stdout" \
  2>"$tmp/stderr"

eq "$?" 2
eq "$(cat "$tmp/stdout")" ""
eq "$(cat "$tmp/stderr")" "$(cat <<END
Expected "list" at $tmp/example.js:1:19 (found "array")
Expected "idx" at $tmp/example.js:2:11 (found "i")
END
)"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cat >"$tmp/property-names.js" <<END
var a = {b: {c: 'd'}};
a.b.c;
a['b']['c'];
END

bin/deedpoll -r a:alpha -r b:beta -- "$tmp/property-names.js" \
  1>"$tmp/stdout" \
  2>"$tmp/stderr"

eq "$?" 1
eq "$(cat "$tmp/stdout")" ""
eq "$(cat "$tmp/stderr")" "$(cat <<END
Expected "alpha" at $tmp/property-names.js:1:4 (found "a")
END
)"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

echo "var a;" | bin/deedpoll -r a:alpha \
  1>"$tmp/stdout" \
  2>"$tmp/stderr"

eq "$?" 1
eq "$(cat "$tmp/stdout")" ""
eq "$(cat "$tmp/stderr")" "$(cat <<END
Expected "alpha" at [stdin]:1:4 (found "a")
END
)"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cat >"$tmp/before.js" <<END
var a;
END

cat >"$tmp/after.js" <<END
var a;
END

echo "var a;" | bin/deedpoll -r a:alpha -- "$tmp/before.js" - "$tmp/after.js" \
  1>"$tmp/stdout" \
  2>"$tmp/stderr"

eq "$?" 3
eq "$(cat "$tmp/stdout")" ""
eq "$(cat "$tmp/stderr")" "$(cat <<END
Expected "alpha" at $tmp/before.js:1:4 (found "a")
Expected "alpha" at [stdin]:1:4 (found "a")
Expected "alpha" at $tmp/after.js:1:4 (found "a")
END
)"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rm -r -- "$tmp"

printf '\n%s/%s assertions satisfied\n\n' $passes $((passes + failures))
exit $failures
